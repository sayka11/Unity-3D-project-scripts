using UnityEngine;
using UnityEngine.UI;

public class ScoreScript : MonoBehaviour
{
    public Text scoreText;       // Текст для текущего счета
    public Text bestScoreText;   // Текст для лучшего счета
    public GameObject Player;    // Игрок
    public GameObject Platform;  // Платформа

    private int score = 0;       // Текущее значение счета
    private int bestScore = 0;   // Лучший результат
    private bool isGameRunning = true; // Флаг состояния игры

    private Coroutine scoreCoroutine; // Ссылка на корутину

    private void Start()
    {
        // Проверяем, указаны ли ссылки на игрока и платформу
        if (Player == null || Platform == null)
        {
            Debug.LogError("Необходимо привязать объекты Player и Platform в инспекторе!");
            return;
        }

        // Загружаем лучший результат из PlayerPrefs
        bestScore = PlayerPrefs.GetInt("BestScore", 0);

        // Обновляем текстовые поля
        UpdateScoreText();
        UpdateBestScoreText();

        // Запуск корутины для увеличения счета каждую секунду
        scoreCoroutine = StartCoroutine(IncreaseScoreOverTime());
    }

    private void Update()
    {
        // Проверяем, находится ли игрок ниже платформы
        if (isGameRunning && Player.transform.position.y < Platform.transform.position.y)
        {
            StopScore(); // Останавливаем счет
        }
    }

    private System.Collections.IEnumerator IncreaseScoreOverTime()
    {
        while (isGameRunning) // Проверяем, работает ли игра
        {
            yield return new WaitForSeconds(1f); // Ждем 1 секунду
            score += 1;                          // Увеличиваем счет
            UpdateScoreText();                   // Обновляем текст

            // Проверяем, стал ли текущий счет новым рекордом
            if (score > bestScore)
            {
                bestScore = score;
                UpdateBestScoreText();

                // Сохраняем новый лучший результат в PlayerPrefs
                PlayerPrefs.SetInt("BestScore", bestScore);
                PlayerPrefs.Save();
            }
        }
    }

    private void UpdateScoreText()
    {
        if (scoreText != null)
        {
            scoreText.text = "Score: " + score.ToString();
        }
    }

    private void UpdateBestScoreText()
    {
        if (bestScoreText != null)
        {
            bestScoreText.text = "Best Score: " + bestScore.ToString();
        }
    }

    public void StopScore()
    {
        isGameRunning = false; // Останавливаем обновление счета
        if (scoreCoroutine != null)
        {
            StopCoroutine(scoreCoroutine); // Останавливаем корутину
            scoreCoroutine = null;         // Убираем ссылку для безопасности
        }

        Debug.Log("Счет остановлен.");
    }

    public void ResetScore()
    {
        // Сбрасываем текущий счет
        score = 0;
        UpdateScoreText();
    }

    public void ResetBestScore()
    {
        // Сбрасываем лучший результат
        bestScore = 0;
        PlayerPrefs.DeleteKey("BestScore");
        UpdateBestScoreText();
    }
}
